package com.baml.equity.orderprocessing;

import equity.client.RandomOrderRequestGenerator;
import equity.orderprocessing.LimitOrderMatchingJob;
import equity.vo.Order;
import equity.vo.Trade;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class TestLimitOrderMatching{
	// Bid order book
	protected TreeMap<Double, LinkedList<Order>> bidMap = new TreeMap<>();
    // Ask order book
	protected TreeMap<Double, LinkedList<Order>> askMap = new TreeMap<>(Comparator.reverseOrder());


    @BeforeEach
	protected void setUp() {
		Order bidOrder1 = RandomOrderRequestGenerator.getNewOrder();
		bidOrder1.setBrokerId("Broker 1");
		bidOrder1.setStockNo("001");
		bidOrder1.setPrice(8.1);
		bidOrder1.setQuantity(300);

		LinkedList<Order> orderList1 = new LinkedList<>();
		orderList1.add(bidOrder1);
		bidMap.put(bidOrder1.getPrice(), orderList1);

		Order askOrder1 = RandomOrderRequestGenerator.getNewOrder();
		askOrder1.setBrokerId("Broker 2");
		askOrder1.setStockNo("001");
		askOrder1.setPrice(8.2);
		askOrder1.setQuantity(100);

		Order askOrder2 = RandomOrderRequestGenerator.getNewOrder();
		askOrder2.setBrokerId("Broker 2");
		askOrder2.setStockNo("001");
		askOrder2.setPrice(8.5);
		askOrder2.setQuantity(300);

		Order askOrder3 = RandomOrderRequestGenerator.getNewOrder();
		askOrder3.setBrokerId("Broker 2");
		askOrder3.setStockNo("001");
		askOrder3.setPrice(8.5);
		askOrder3.setQuantity(400);

		LinkedList<Order> orderList2 = new LinkedList<>();
		orderList2.add(askOrder1);
		askMap.put(askOrder1.getPrice(), orderList2);
		LinkedList<Order> orderList3 = new LinkedList<>();
		orderList3.add(askOrder2);
		orderList3.add(askOrder3);
		askMap.put(askOrder2.getPrice(), orderList3);

	}

    @Test
	public void testNoNewBid() {
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertNotNull(trades);
		assertEquals(0, trades.size());
	}


    @Test
	public void testCrossBid() {
		PriorityQueue<Order> orderList = new PriorityQueue<>(orderCmp);
		Order bidOrder2 = new Order("Broker_1", "005", 200);
		orderList.add(bidOrder2);
		bidMap.put(BigDecimal.valueOf(8.5), orderList);
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertEquals(2, trades.size());
		Trade trade1 = trades.getFirst();
		assertEquals("00001", trade1.getStockNo());
		assertEquals("Broker_1", trade1.getBuyBrokerID());
		assertEquals("Broker_2", trade1.getSellBrokerID());
		assertEquals(100, trade1.getQuantity());
		assertEquals(8.2, trade1.getExecutedPrice().doubleValue());
		Trade trade2 = trades.get(1);
		assertEquals("00001", trade2.getStockNo());
		assertEquals("Broker_1", trade2.getBuyBrokerID());
		assertEquals("Broker_2", trade2.getSellBrokerID());
		assertEquals(100, trade2.getQuantity());
		assertEquals(8.5, trade2.getExecutedPrice().doubleValue());	
		assertEquals(8.1, bidMap.firstKey().doubleValue());
		assertEquals(8.5, askMap.firstKey().doubleValue());
		
	}

    @Test
	public void testBidBookEmpty() {
		bidMap.clear();
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertNotNull(trades);
		assertEquals(0, trades.size());		
	}

    @Test
	public void testAskBookEmpty() {
		askMap.clear();
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertNotNull(trades);
		assertEquals(0, trades.size());				
	}

	@Test
	public void testBigBid() {
		PriorityQueue<Order> orderList = new PriorityQueue<>(orderCmp);
		Order bidOrder = new Order("Broker_1", "005", 20000);
		orderList.add(bidOrder);
		bidMap.put(BigDecimal.valueOf(10), orderList);
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertEquals(3, trades.size());	
		assertTrue(askMap.isEmpty());
		
	}

	@Test
	public void testBigAsk() {
		PriorityQueue<Order> orderList = new PriorityQueue<>(orderCmp);
		Order askOrder = new Order("Broker_1", "005", 20000);
		orderList.add(askOrder);
		askMap.put(BigDecimal.valueOf(7), orderList);
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertEquals(1, trades.size());	
		assertTrue(bidMap.isEmpty());
		
	}

	@Test
	public void testJustMatch() {
		PriorityQueue<Order> orderList = new PriorityQueue<>(orderCmp);
		Order bidOrder = new Order("Broker_1", "005", 100);
		orderList.add(bidOrder);
		bidMap.put(BigDecimal.valueOf(8.2), orderList);
		List<Trade> trades = LimitOrderMatchingJob.orderMatching("00001", bidMap, askMap);
		assertEquals(1, trades.size());	
		assertEquals(8.5, askMap.firstKey().doubleValue());
		
	}
	
	
}
